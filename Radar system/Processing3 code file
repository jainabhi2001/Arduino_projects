import processing.serial.*; // imports library for serial communication
import java.awt.event.KeyEvent; // imports library for reading the data from the serial port
import java.io.IOException;
Serial myPort; // defines Object Serial
// defubes variables
String angle="";
String distance="";
String data="";
String noObject;
float pixsDistance;
int iAngle, iDistance;
int index1=0;
int index2=0;
PFont orcFont;
void setup() {
  
 fullScreen();
 smooth();
 myPort = new Serial(this,"COM3", 9600); // starts the serial communication
 myPort.bufferUntil('.'); // reads the data from the serial port up to the character '.'. So actually it reads this: angle,distance.
}
void draw() {
  
  fill(98,245,31);  // green color
  // simulating motion blur and slow fade of the moving line
  noStroke();  //no lines(here a rectangle below) colour
  fill(0,4); //fills the rectangle with (r,g,b) as (0,4,4)
  rect(0, 0, width, height-height*0.065); //create a rectangular box
  
  fill(98,245,31); // green color
  // calls the functions for drawing the radar
  drawRadar(); 
  drawLine();
  drawObject();
  drawText();
}
void serialEvent (Serial myPort) { // starts reading data from the Serial Port
  // reads the data from the Serial Port up to the character '.' and puts it into the String variable "data".
  data = myPort.readStringUntil('.');
  data = data.substring(0,data.length()-1);
  
  index1 = data.indexOf(","); // find the character ',' and puts it into the variable "index1"
  angle= data.substring(0, index1); // read the data from position "0" to position of the variable index1 or thats the value of the angle the Arduino Board sent into the Serial Port
  distance= data.substring(index1+1, data.length()); // read the data from position "index1" to the end of the data pr thats the value of the distance
  
  // converts the String variables into Integer
  iAngle = int(angle);
  iDistance = int(distance);
}
void drawRadar() {
  pushMatrix();
  translate(width/2,height-height*0.074); // moves the starting coordinats to new location
  noFill();
  strokeWeight(2);
  stroke(98,245,31);
  // draws the arc lines
  arc(0,0,(width-width*0.0625),(width-width*0.0625),PI,TWO_PI);
  arc(0,0,(width-width*0.166),(width-width*0.166),PI,TWO_PI);
  arc(0,0,(width-width*0.27),(width-width*0.27),PI,TWO_PI);
  arc(0,0,(width-width*0.37),(width-width*0.37),PI,TWO_PI);
  arc(0,0,(width-width*0.479),(width-width*0.479),PI,TWO_PI);
  arc(0,0,(width-width*0.583),(width-width*0.583),PI,TWO_PI);
  arc(0,0,(width-width*0.687),(width-width*0.687),PI,TWO_PI);
  arc(0,0,(width-width*0.791),(width-width*0.791),PI,TWO_PI);
  // draws the angle lines
  line(-width/2,0,width/2,0);  //since now the new orgin is in bottom middle
  line(0,0,(-width/2)*cos(radians(0)),(-width/2)*sin(radians(0)));
  line(0,0,(-width/2)*cos(radians(30)),(-width/2)*sin(radians(30)));
  line(0,0,(-width/2)*cos(radians(60)),(-width/2)*sin(radians(60)));
  line(0,0,(-width/2)*cos(radians(90)),(-width/2)*sin(radians(90)));
  line(0,0,(-width/2)*cos(radians(120)),(-width/2)*sin(radians(120)));
  line(0,0,(-width/2)*cos(radians(150)),(-width/2)*sin(radians(150)));
  line(0,0,(-width/2)*cos(radians(180)),(-width/2)*sin(radians(180)));
  line((-width/2)*cos(radians(30)),0,width/2,0);
  popMatrix();
}
void drawObject() {          //this the red radar line which appears when object is detected
  pushMatrix();
  translate(width/2,height-height*0.074); // moves the starting coordinats to new location
  strokeWeight(9);
  stroke(255,10,10); // red color
  pixsDistance = (iDistance*((height-height*0.1666)*0.025))/1.5; // covers the distance from the sensor from cm to pixels.AND divided the distance by 2 or 1.5 so that it can represent upro 70 or 80 instead of jus 40.
  // limiting the range to 70 cms
  if(iDistance<70){
    // draws the object according to the angle and the distance
  line(pixsDistance*cos(radians(iAngle)),-pixsDistance*sin(radians(iAngle)),(width)*cos(radians(iAngle)),-(width)*sin(radians(iAngle)));//The red lines start from far point and extends till the nearest distance detected.
  }
  popMatrix();
}
void drawLine() {          //this the green radar line which appears when no object is detected
  pushMatrix();
  strokeWeight(9);
  stroke(30,250,60);
  translate(width/2,height-height*0.074); // moves the starting coordinats to new location
  line(0,0,(height-height*0.12)*cos(radians(iAngle)),-(height-height*0.12)*sin(radians(iAngle))); // draws the line according to the angle  //We use (-)ve sign in y2 coordinate because in processing3 by default coorinates are taken in fourth quadrant as positive
  popMatrix();
}
void drawText() { // draws the texts on the screen
  
  pushMatrix();
  if(iDistance>70) {
  noObject = "Out of Range";
  }
  else {
  noObject = "In Range";
  }
  fill(0,0,0);
  noStroke();
  rect(0, height-height*0.0648, width, height);  //This text box is for specifing the distance above the radar line
  fill(#00FFFF);
  textSize(15);
  
  text("10cm",width-width*0.4104,height-height*0.0833);
  text("20cm",width-width*0.3654,height-height*0.0833);
  text("30cm",width-width*0.3100,height-height*0.0833);
  text("40cm",width-width*0.2550,height-height*0.0833);
  text("50cm",width-width*0.2000,height-height*0.0833);
  text("60cm",width-width*0.1450,height-height*0.0833);
  text("70cm",width-width*0.1000,height-height*0.0833);
  textSize(35);
  text("Abhishek Jain", width-width*0.9, height-height*0.0250);
  textSize(25);
  text("Angle: " + iAngle +" °", width-width*0.48, height-height*0.0250);
  text("Distance:", width-width*0.30, height-height*0.0250);
  if(iDistance<70) {
  text("        " + iDistance +" cm", width-width*0.25, height-height*0.0250);
  }
  textSize(25);
  fill(98,245,60);
  translate((width-width*0.4994)+width/2*cos(radians(30)),(height-height*0.0907)-width/2*sin(radians(30)));
  rotate(-radians(-60));
  text("30°",0,0);
  resetMatrix();
  translate((width-width*0.503)+width/2*cos(radians(60)),(height-height*0.0888)-width/2*sin(radians(60)));
  rotate(-radians(-30));
  text("60°",0,0);
  resetMatrix();
  translate((width-width*0.507)+width/2*cos(radians(90)),(height-height*0.0833)-width/2*sin(radians(90)));
  rotate(radians(0));
  text("90°",0,0);
  resetMatrix();
  translate(width-width*0.513+width/2*cos(radians(120)),(height-height*0.07129)-width/2*sin(radians(120)));
  rotate(radians(-30));
  text("120°",0,0);
  resetMatrix();
  translate((width-width*0.5104)+width/2*cos(radians(150)),(height-height*0.0574)-width/2*sin(radians(150)));
  rotate(radians(-60));
  text("150°",0,0);
  popMatrix(); 
}
